=======================================================================  
							QUESTIONS 2.1:  
=======================================================================
>>>>>>>> (1) Explain the variation in time per operation vs the number of iterations? How would you propose to correct for this effect? <<<<<<<<
The average time per operation decreases as the number of iterations increases up to 100. This is because the overhead from thread creation becomes a smaller fraction of the total cost as the number of iterations increases. We could correct for this effect by determining the total time that the pthread_create calls take and subtracting it from the total time.  Additionally, the variation also occurs because when the program runs with more iterations, branch prediction may improve and cache hits may increase.

With the number of iterations larger than 100, the time per operation increases. This is because the size of the lists grows and therefore, he insert and lookup function take longer to iterate through the list.  This can be accounted for by plotting the average time per operation against the size of the list.

=======================================================================  
							QUESTIONS 2.2:  
=======================================================================
>>>>>>>> (1) Compare the variation in time per protected operation vs the number of threads in Part 2 and in Part 1. Explain the difference. <<<<<<<<
In both Part 1 and Part 2, the time per protected operation goes down as the number of threads increases. However, Part 2 takes more time because the critical sections in the list functions are larger and therefore, take more time.

=======================================================================  
							QUESTIONS 2.3:  
=======================================================================
>>>>>>>> (1) Explain the change in performance of the synchronized methods as a function of the number of threads per list. <<<<<<<<

>>>>>>>> (2) Explain why threads per list is a more interesting number than threads (for this particular measurement). <<<<<<<<




